{$DEFINE SRL_DISABLE_REMOTEINPUT}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}
{$DEFINE SRL_KEYBOARD_INCLUDED}

begin
  Login.PlayerIndex := 0;
end;

const
  Food = 'Dark crab';
  BuffPrayer2 = ERSPrayer.PIETY;
  BuffPrayer1 = ERSPrayer.RIGOUR;
  Thrall = ERSSpell.NPC_CONTACT;
  Gear1 = ['Ancient d''hide boots', 'Archers ring (i)', 'ava''s assembler', 'Necklace of anguish', 'Masori chaps (f)', 'Masori body (f)', 'Toxic blowpipe'];
  Gear2 = ['Dragon boots', 'Emberlight', 'Bandos tassets', 'Bandos chestplate', 'Fire cape (l)', 'Amulet of torture', 'Dragon defender', 'Neitiznot faceguard', 'Berserker ring (i)'];

var
  Keys: array[0..9] of Integer = [112, 113, 114, 115, 116, 117, 118, 119, 120, 121];
  KeyPressed: array[0..9] of Boolean;
  i, prayerRestore: Integer;
  Disable, SwitchBuffPrayer, EquipGear1: Boolean;
  Slots: TIntegerArray;
  MousePos1: TPoint;

function TRSInventory.Consume(consumableType: ERSConsumable; out Slots: TIntegerArray): Boolean; Override;
var
  ConsumableHandler, Tmp: PConsumableHandler;
  FoundConsumables: TRSConsumableArray;
  StartingPoints: Int32;
  TrashSlots: TIntegerArray;
begin
  ConsumableHandler := TConsumableHandler.GetHandler(consumableType);
  if not ConsumableHandler^.IsSetup then
    Exit(False);

  Slots := Self.FindConsumable(consumableType, FoundConsumables);
  if Slots.Len() = 0 then
    Exit(False);
  Result := Self.ClickSlot(Slots[0]);

  if Result then
    case consumableType of
      ERSConsumable.FOOD:
        Result := WaitUntil(StartingPoints < Minimap.GetHPLevel(), 100, 3000);
      ERSConsumable.PRAYER:
        Result := WaitUntil(StartingPoints < Minimap.GetPrayerLevel(), 100, 3000);
      ERSConsumable.ENERGY:
        Result := WaitUntil(StartingPoints < Minimap.GetRunEnergy(), 100, 3000);
    end;
end;

function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;
begin
  if Self.GetCurrentTab() = Tab then
    Exit(True);
  Mouse.Move(GetTabBox(Tab));
  Mouse.Click(MOUSE_LEFT);
  Result := WaitUntil(Self.GetCurrentTab() = Tab, 50, 1000);
end;

procedure TogglePrayer(Prayers: array of ERSPrayer);
var
  MousePos: TPoint;
  i: Integer;
begin
  MousePos := Mouse.Position;
  GameTabs.Open(ERSGameTab.PRAYER);
  for i := 0 to High(Prayers) do
    if not Prayer.IsPrayerActive(Prayers[i]) then
      Mouse.Click(Prayer.GetPrayerBox(Prayers[i]), MOUSE_LEFT);

  WaitUntil(Prayer.AllPrayerActive(Prayers), 100, 2000);
  Mouse.Move(MousePos, 1, True);
end;

procedure ConsumeItem(ConsumableType: ERSConsumable);
var
  MousePos: TPoint;
begin
  MousePos := Mouse.Position;
  Inventory.Consume(ConsumableType, Slots);
  Wait(300);
  Mouse.Move(MousePos, 1, True);
end;

procedure EatFood(FoodName: String);
var
  MousePos: TPoint;
begin
  MousePos := Mouse.Position;
  Slots := [];
  Inventory.FindItem(FoodName, Slots);
  if Slots.Len() > 0 then
    Inventory.ClickSlot(Slots[0]);
  Wait(300);
  Mouse.Move(MousePos, 1, True);
end;

procedure ToggleDisable();
begin
  Disable := not Disable;
end;

procedure CastSpell(Spell: ERSSpell);
begin
  Magic.CastSpell(Spell);
end;

procedure EquipGear(Gear: array of String);
var
  i, x: Integer;
  itemIDs: TRSItemArray;
  slots11: TIntegerArray;
begin
  for i := 0 to High(Gear) do
  begin
    itemIDs := ItemFinder.GetItemIDs(Gear[i]);
    for x := 0 to High(itemIDs) do
      if Inventory.MouseItem(itemIDs[x]) then
        Mouse.Click(MOUSE_LEFT);

    Wait(10);

    if Inventory.ContainsItem(Gear[i]) then
    begin
      Inventory.FindItem(Gear[i], slots11);
      Wait(100);

      if Inventory.ContainsItem(Gear[i]) then
        for x := 0 to High(itemIDs) do
          if Inventory.MouseItem(itemIDs[x]) then
            Mouse.Click(MOUSE_LEFT);
    end;
  end;
end;

begin
  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;

  Mouse.Wind := 0;
  Mouse.Gravity := 20;
  Mouse.Speed := 150;
  Mouse.CanIdle := False;
  Mouse.MissChance := 0;

  EquipGear1 := True;
  prayerRestore := Random(15, 25);

  repeat
    for i := 0 to High(Keys) do
    begin
      if System.IsKeyDown(Keys[i]) and not KeyPressed[i] then
      begin
        if not Disable then
        begin
          case Keys[i] of
            112: TogglePrayer([ERSPrayer.PROTECT_FROM_MAGIC]);
            113: TogglePrayer([ERSPrayer.PROTECT_FROM_MISSILES]);
            114: TogglePrayer([ERSPrayer.PROTECT_FROM_MELEE]);
            115: if EquipGear1 then TogglePrayer([BuffPrayer2]) else TogglePrayer([BuffPrayer1]);
            116: ConsumeItem(ERSConsumable.PRAYER);
            117: EatFood(Food);
            118:
              if Inventory.ContainsConsumable(ERSConsumable.BOOST) then
                ConsumeItem(ERSConsumable.BOOST)
              else if Inventory.ContainsConsumable(ERSConsumable.MAGIC_BOOST) then
                ConsumeItem(ERSConsumable.MAGIC_BOOST)
              else if Inventory.ContainsConsumable(ERSConsumable.ATTACK_BOOST) then
                ConsumeItem(ERSConsumable.ATTACK_BOOST)
              else if Inventory.ContainsConsumable(ERSConsumable.RANGING_BOOST) then
                ConsumeItem(ERSConsumable.RANGING_BOOST)
              else if Inventory.ContainsConsumable(ERSConsumable.DEFENCE_BOOST) then
                ConsumeItem(ERSConsumable.DEFENCE_BOOST)
              else if Inventory.ContainsConsumable(ERSConsumable.STRENGTH_BOOST) then
                ConsumeItem(ERSConsumable.STRENGTH_BOOST);
            119:
              begin
                Mouse.Speed := 230;
                MousePos1 := Mouse.Position;
                if EquipGear1 then
                begin
                  Inventory.Open();
                  EquipGear(Gear2);
                  Wait(10);
                  TogglePrayer([BuffPrayer2]);
                end
                else
                begin
                  Inventory.Open();
                  EquipGear(Gear1);
                  Wait(10);
                  TogglePrayer([BuffPrayer1]);
                end;
                EquipGear1 := not EquipGear1;
                Mouse.Move(MousePos1, 1, True);
                Mouse.Speed := 150;
              end;
            120:
              begin
                Minimap.EnablePrayer();
                Wait(50, 100);
                Minimap.DisablePrayer();
              end;
          end;
        end;

        if Keys[i] = 121 then ToggleDisable();

        Writeln(IntToStr(Keys[i]), ' pressed');
        KeyPressed[i] := True;
      end
      else if not System.IsKeyDown(Keys[i]) then
        KeyPressed[i] := False;
    end;
  until False;
end.
